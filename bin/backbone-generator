#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'thor/group'

class BackboneGenerator < Thor
  include Thor::Actions

  class_option :coffee, :type => :boolean, :desc => 'Generate CoffeeScript instead of JavaScript'
  def self.source_root
    File.expand_path('../../templates', __FILE__)
  end

  no_tasks do
    def extension
      options[:coffee] ? 'coffee' : 'js'
    end

    def script_target
      options[:coffee] ? 'app/coffeescripts' : 'public/javascripts'
    end

    def view_target
      'app/views'
    end

    def test_target
      'spec/javascripts'
    end

    def underscore_name
      singularize(Thor::Util.snake_case(@name.gsub("::", "/")))
    end

    def css_class_name
      underscore_name.gsub(%r{[^a-z0-9_]}, '-')
    end

    def plural_underscore_name
      pluralize(underscore_name)
    end

    def object_name
      singularize(@name.gsub('::', ''))
    end

    def plural_object_name
      pluralize(object_name)
    end

    def generate_model
      template("model.#{extension}.erb", File.join(script_target, "models", "#{underscore_name}.#{extension}"))
      template("model_spec.#{extension}.erb", File.join(test_target, "models", "#{underscore_name}_spec.#{extension}"))
    end

    def generate_view
      template("view.#{extension}.erb", File.join(script_target, "views", "#{underscore_name}_view.#{extension}"))
      template("view.jst.erb", File.join(view_target, "#{underscore_name}s/view.jst"))
      template("view_spec.#{extension}.erb", File.join(test_target, "views", "#{underscore_name}_view_spec.#{extension}"))
    end

    def generate_collection
      template("collection.#{extension}.erb", File.join(script_target, "collections", "#{plural_underscore_name}.#{extension}"))
      template("collection_spec.#{extension}.erb", File.join(test_target, "collections", "#{plural_underscore_name}_spec.#{extension}"))
    end

    def generate_collection_view
      template("collection_view.#{extension}.erb", File.join(script_target, 'views', "#{plural_underscore_name}_view.#{extension}"))
      template("collection_view.jst.erb", File.join(view_target, "#{plural_underscore_name}/list.jst"))
      template("collection_view_spec.#{extension}.erb", File.join(test_target, "views", "#{plural_underscore_name}_view_spec.#{extension}"))
    end
  end

  desc 'model Namespaced::Name', "Create a model"
  def model(name)
    @name = name
    generate_model
  end

  desc 'view Namespaced::Name', "Create a view"
  def view(name)
    @name = name
    generate_view
  end

  desc 'collection Namespaced::Name', "Create a collection"
  def collection(name)
    @name = name
    generate_collection
  end

  desc 'collection-view Namespaced::Name', "Create a collection view"
  def collection_view(name)
    @name = name
    generate_collection_view
  end

  desc 'scaffold Namespaced::Name', "Generate everything for this object"
  def scaffold(name)
    @name = name
    %w{model view collection collection_view}.each { |which| send("generate_#{which}") }
  end

  desc 'spec-helper', "Generate a spec helper for Backbone things"
  def spec_helper
    template("spec_helper.#{extension}.erb", File.join(test_target, "helpers", "backbone_spec_helper.#{extension}"))
  end

  desc "app-helper", "Generate an application helper for useful Backbone things"
  def app_helper
    template("app_helper.#{extension}.erb", File.join(script_target, "applications", "backbone_helper.#{extension}"))
  end

  desc "app-scaffold", "Generate an application scaffold"
  def app_scaffold
    template("app_view.#{extension}.erb", File.join(script_target, "application", "app_view.#{extension}"))
    template("app_view.jst.erb", File.join(view_target, "application", "app_view.jst"))
    template("controller.#{extension}.erb", File.join(script_target, "application", "controller.#{extension}"))
    template("app_view_spec.#{extension}.erb", File.join(test_target, "application", "app_view_spec.#{extension}"))
  end

  private
  def pluralize(string)
    singularize(string) + 's'
  end

  def singularize(string)
    string.gsub(%r{s$}, '')
  end
end

BackboneGenerator.start
