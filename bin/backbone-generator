#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'thor/group'

class BackboneGenerator < Thor
  include Thor::Actions

  def self.source_root
    File.expand_path('../../templates', __FILE__)
  end

  no_tasks do
    def underscore_name
      singularize(Thor::Util.snake_case(@name.gsub("::", "/")))
    end

    def plural_underscore_name
      pluralize(underscore_name)
    end

    def object_name
      singularize(@name.gsub('::', ''))
    end

    def plural_object_name
      pluralize(object_name)
    end

    def generate_model
      template('model.js.erb', "public/javascripts/models/#{underscore_name}.js")
      template('model_spec.js.erb', "spec/javascripts/models/#{underscore_name}_spec.js")
    end

    def generate_view
      template('view.js.erb', "public/javascripts/views/#{underscore_name}_view.js")
      template('view.jst.erb', "app/views/#{underscore_name}s/view.jst")
      template('view_spec.js.erb', "spec/javascripts/views/#{underscore_name}_view_spec.js")
    end

    def generate_collection
      template('collection.js.erb', "public/javascripts/collections/#{plural_underscore_name}.js")
      template('collection_spec.js.erb', "spec/javascripts/collections/#{plural_underscore_name}_spec.js")
    end

    def generate_collection_view
      template('collection_view.js.erb', "public/javascripts/views/#{plural_underscore_name}_view.js")
      template('collection_view.jst.erb', "app/views/#{plural_underscore_name}/list.jst")
      template('collection_view_spec.js.erb', "spec/javascripts/views/#{plural_underscore_name}_view_spec.js")
    end
  end

  desc 'model Namespaced::Name', "Create a model"
  def model(name)
    @name = name
    generate_model
  end

  desc 'view Namespaced::Name', "Create a view"
  def view(name)
    @name = name
    generate_view
  end

  desc 'collection Namespaced::Name', "Create a collection"
  def collection(name)
    @name = name
    generate_collection
  end

  desc 'collection-view Namespaced::Name', "Create a collection view"
  def collection_view(name)
    @name = name
    generate_collection_view
  end

  desc 'scaffold Namespaced::Name', "Generate everything for this object"
  def scaffold(name)
    @name = name
    %w{model view collection collection_view}.each { |which| send("generate_#{which}") }
  end

  desc 'spec-helper', "Generate a spec helper for Backbone things"
  def spec_helper
    template('spec_helper.js.erb', 'spec/javascripts/helpers/backbone_spec_helper.js')
  end

  private
  def pluralize(string)
    singularize(string) + 's'
  end

  def singularize(string)
    string.gsub(%r{s$}, '')
  end
end

BackboneGenerator.start
